{"mappings":"C,A,W,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,E,Q,C,I,E,E,SCCA,IAAM,EAAO,CACX,aAAc,SAAS,aAAa,CAAC,SACrC,MAAO,SAAS,aAAa,CAAC,kBAC9B,KAAM,SAAS,aAAa,CAAC,iBAC7B,OAAQ,SAAS,aAAa,CAAC,kBACjC,EAEA,EAAK,YAAY,CAAC,gBAAgB,CAAC,SAAU,SAAU,CAAC,EACtD,EAAE,cAAc,GAChB,AAkBF,WACE,IAAI,EAAa,OAAO,EAAK,KAAK,CAAC,KAAK,EACpC,EAAY,OAAO,EAAK,IAAI,CAAC,KAAK,EAClC,EAAS,OAAO,EAAK,MAAM,CAAC,KAAK,EAErC,IAAK,IAAI,EAAI,EAAG,GAAK,EAAQ,GAAK,EAAG,CACnC,IAAI,EAAe,EAAa,EAAY,EAC5C,AArBJ,CAAA,SAAuB,CAAQ,CAAE,CAAK,EAWpC,OAVgB,IAAI,QAAQ,CAAC,EAAS,KACpC,IAAM,EAAgB,KAAK,MAAM,GAAK,GACtC,WAAW,KACL,EACF,EAAQ,CAAE,SAAA,EAAU,MAAA,CAAM,GAE1B,EAAO,CAAE,SAAA,EAAU,MAAA,CAAM,EAE7B,EAAG,EACL,EAEF,CAAA,EASkB,EAAI,EAAG,GAClB,IAAI,CAAC,CAAC,CAAA,SAAE,CAAQ,CAAA,MAAE,CAAK,CAAE,IACxB,AAAA,CAAA,EAAA,EAAA,MAAK,AAAL,EAAO,OAAO,CAAC,CAAC,2BAAoB,EAAE,EAAS,IAAI,EAAE,EAAM,EAAE,CAAC,CAEhE,GACC,KAAK,CAAC,CAAC,CAAA,SAAE,CAAQ,CAAA,MAAE,CAAK,CAAE,IACzB,AAAA,CAAA,EAAA,EAAA,MAAK,AAAL,EAAO,OAAO,CAAC,CAAC,0BAAmB,EAAE,EAAS,IAAI,EAAE,EAAM,EAAE,CAAC,CAE/D,EACJ,CACF,GAjCA,E","sources":["<anon>","src/js/03-promises.js"],"sourcesContent":["(function () {\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequired7c6\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequired7c6\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $h6c0i = parcelRequire(\"h6c0i\");\nconst $ce04d3a99e08e73b$var$refs = {\n    formPromises: document.querySelector(\".form\"),\n    delay: document.querySelector('[name=\"delay\"]'),\n    step: document.querySelector('[name=\"step\"]'),\n    amount: document.querySelector('[name=\"amount\"]')\n};\n$ce04d3a99e08e73b$var$refs.formPromises.addEventListener(\"submit\", function(e) {\n    e.preventDefault();\n    $ce04d3a99e08e73b$var$generatePromises();\n// e.currentTarget.reset(); ???? А чи треба очищувати взагалі форму?\n});\nfunction $ce04d3a99e08e73b$var$createPromise(position, delay) {\n    const promise = new Promise((resolve, reject)=>{\n        const shouldResolve = Math.random() > 0.3;\n        setTimeout(()=>{\n            if (shouldResolve) resolve({\n                position: position,\n                delay: delay\n            });\n            else reject({\n                position: position,\n                delay: delay\n            });\n        }, delay);\n    });\n    return promise;\n}\nfunction $ce04d3a99e08e73b$var$generatePromises(e) {\n    let firstDelay = Number($ce04d3a99e08e73b$var$refs.delay.value);\n    let inputStep = Number($ce04d3a99e08e73b$var$refs.step.value);\n    let amount = Number($ce04d3a99e08e73b$var$refs.amount.value);\n    for(let i = 0; i <= amount; i += 1){\n        let currentDelay = firstDelay + inputStep * i;\n        $ce04d3a99e08e73b$var$createPromise(i + 1, currentDelay).then(({ position: position, delay: delay })=>{\n            (0, $h6c0i.Notify).success(`\\u{2705} Fulfilled promise ${position} in ${delay}ms`);\n        // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        }).catch(({ position: position, delay: delay })=>{\n            (0, $h6c0i.Notify).failure(`\\u{274C} Rejected promise ${position} in ${delay}ms`);\n        // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    }\n}\n\n})();\n//# sourceMappingURL=03-promises.5da85e3e.js.map\n","import { Notify } from 'notiflix/build/notiflix-notify-aio';\nconst refs = {\n  formPromises: document.querySelector('.form'),\n  delay: document.querySelector('[name=\"delay\"]'),\n  step: document.querySelector('[name=\"step\"]'),\n  amount: document.querySelector('[name=\"amount\"]'),\n};\n\nrefs.formPromises.addEventListener('submit', function (e) {\n  e.preventDefault();\n  generatePromises();\n  // e.currentTarget.reset(); ???? А чи треба очищувати взагалі форму?\n});\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n  return promise;\n}\n\nfunction generatePromises(e) {\n  let firstDelay = Number(refs.delay.value);\n  let inputStep = Number(refs.step.value);\n  let amount = Number(refs.amount.value);\n\n  for (let i = 0; i <= amount; i += 1) {\n    let currentDelay = firstDelay + inputStep * i;\n    createPromise(i + 1, currentDelay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n}\n"],"names":["$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$h6c0i","$ce04d3a99e08e73b$var$refs","formPromises","document","querySelector","delay","step","amount","addEventListener","e","preventDefault","$ce04d3a99e08e73b$var$generatePromises","firstDelay","Number","value","inputStep","i","currentDelay","$ce04d3a99e08e73b$var$createPromise","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.5da85e3e.js.map"}